deployment:
  # -- Container image to use
  image: ghcr.io/markround/nkp-cluster-cleaner:0.13.13
  # -- Number of replicas to deploy
  replicas: 1

ingress:
  # -- Enables ingress through the Kommander Traefik deployment
  enabled: true
  # -- URL Prefix for the dashboard
  prefix: /mdr/nkp-cluster-cleaner
  # -- Ingress class to use
  class: kommander-traefik
  authentication:
    # -- If true, access to the dashboard will require logging in with an admin account. Setting to false will enable anonymous access.
    enabled: true

analytics:
  # -- Enable the analytics service and components
  enabled: true
  # -- Schedule to run the collection job. Uses standard Kubernetes CronJob syntax.
  schedule: "@hourly"
  # -- How many failed jobs to keep
  failedJobsHistoryLimit: 1
  # -- How many successful jobs to keep
  successfulJobsHistoryLimit: 3

deletion:
  # -- Enable scheduled deletion CronJobs
  enabled: true
  # -- Set to true to actually delete clusters, default is to operate in "dry-run" mode
  delete: false
  # -- Schedule to run the job. Uses standard Kubernetes CronJob syntax.
  schedule: "@daily"
  # -- How many failed jobs to keep
  failedJobsHistoryLimit: 1
  # -- How many successful jobs to keep
  successfulJobsHistoryLimit: 3

app:
  # -- Secret containing a valid kubeconfig for the management cluster
  kubeconfigSecretRef: kommander-self-attach-kubeconfig
  # -- Default set of exclusion rules
  config: |
    excluded_namespace_patterns:
    - ^default$
    protected_cluster_patterns:
    - .*-prod-.*
    extra_labels:
    - name: owner
      description: Cluster owner identifier

monitoring:
  grafanaDashboard:
    # -- Deploy a Dashboard into the NKP Grafana instance
    enabled: false

  serviceMonitor:
    # -- Enable ServiceMonitor for integration with NKP Prometheus monitoring
    enabled: false
    # -- Scrape interval for metrics collection
    interval: "30s"
    # -- Scrape timeout for metrics collection
    scrapeTimeout: "10s"
    # -- Additional labels for ServiceMonitor
    labels:
      prometheus.kommander.d2iq.io/select: "true"
    # -- Additional annotations for ServiceMonitor
    annotations: {}
    # -- Metric relabeling rules
    metricRelabelings: []
      # - sourceLabels: [__name__]
      #   regex: 'nkp_cluster_cleaner_.*'
      #   action: keep
    # -- Relabeling rules
    relabelings: []
      # - sourceLabels: [__meta_kubernetes_pod_name]
      #   targetLabel: pod
      #   action: replace

notifications:
  # -- Enable sending notifications from CronJob
  enabled: false
  # -- Notification backend to use
  backend: slack
  # -- When to run the scheduled notifications CronJob
  schedule: "@hourly"
  # -- How many failed CronJobs to keep
  failedJobsHistoryLimit: 1
  # -- How many successful CronJobs to keep
  successfulJobsHistoryLimit: 3
  # -- Warning threshold percentage of cluster time elapsed
  warningThreshold: "80"
  # -- Critical threshold percentage of cluster time elapsed
  criticalThreshold: "95"

  slack:
    # -- Secret name to retrieve the Slack OAuth token from
    tokenSecretName: slack-token
    # -- Secret key to retrieve the Slack OAuth token from
    tokenSecretKey: token
    # -- Slack channel to use for notifications
    channel: alerts
    # -- Username to display in alerts
    username: "NKP Cluster Cleaner"
    # -- Emjoi icon to use
    iconEmoji: ":broom:"

redis:
  # -- Make use of Redis for persistence, required for notification history and analytics features
  enabled: true
  # -- Hostname of the Redis/Valkey instance used by analytics and notifications
  hostname: nkp-cluster-cleaner-valkey
  # -- Port of the Redis/Valkey instance
  port: 6379
  # -- Redis database number
  db: 0
  authentication:
    # -- Use Redis authentication
    enabled: false
    # -- Secret name that contains the Redis credentials
    secretName: "redis-secret"
    # -- Secret key that contains the Redis username
    secretPasswordKey: "username"
    # -- Secret key that contains the Redis password
    secretUsernameKey: "password"

    
valkey:
  # -- Deploy a Valkey Redis-compatible service for storing historical data and notifications
  enabled: true
  # -- Valkey container image to use
  image: ghcr.io/valkey-io/valkey:8-alpine
  # -- Valkey SAVE_ENV value to specify how often to ensure data is flushed to disk
  saveEnv: "900 1"
  # -- Secret name that contains the default connection password
  secretName: nkp-cluster-cleaner-valkey-secret
  # -- Secret key that contains the default connection password
  secretPasswordKey: valkey-password